@{
    string loginAccount = ViewBag.LoginAccount;
}

<body>
    <div id="MsgList">
        <input type="text" v-model="searchUserName">
        <button type="button" @@click="GetNameSearch()">搜尋</button>
        <button type="button" @@click="GetNameClear()">清除</button>
        <br>

        <table class="table">
            <thead>
                <tr>
                    <th scope="col">編號</th>
                    <th scope="col">姓名</th>
                    <th scope="col">帳號</th>
                    <th scope="col">留言</th>
                    <th scope="col">時間</th>
                    <th scope="col">功能</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="m in msgList" :key="m.messageBoardId">
                    <td>{{m.messageBoardId}}</td>
                    <td>{{m.memberName}}</td>
                    <td>{{m.account}}</td>
                    @* <td>{{m.messageText}}</td> *@
                    <td>
                        <div v-if="updateMsgIdTemp == m.messageBoardId">
                            <input type="text" v-model="updateMsgTemp" />
                        </div>
                        <div v-else="">{{m.messageText}}</div>
                    </td>
                    <td>{{GetDateTime(m.messageTime)}}</td>
                    <td>
                        <button type="button" v-if="accountTemp == m.account && updateMsgIdTemp == m.messageBoardId" @@click="SaveUpdateMsgApi(m.messageBoardId)">保存</button>
                        <button type="button" v-if="accountTemp == m.account" @@click="UpdateMsg(m.messageBoardId, m.messageText)">編輯</button>
                        <button type="button" v-if="accountTemp == m.account" @@click="RemoveMsgApi(m.messageBoardId)">刪除</button>
                    </td>
                </tr>
            </tbody>
        </table>
        <br>
        <button type="button" @@click="isSearchActive ? GetNameSearch(currentShowPage - 1) : PaginationCount(currentShowPage - 1)" :disabled="currentShowPage === 1">上一頁</button>
        <span v-for="cp in currentPageTotal" :key="cp">
            <button type="button" @@click="isSearchActive ? GetNameSearch(cp) : PaginationCount(cp)" :class="{'active': currentShowPage === cp}">{{cp}}</button>
        </span>
        <button type="button" @@click="isSearchActive ? GetNameSearch(currentShowPage + 1) : PaginationCount(currentShowPage + 1)" :disabled="currentShowPage === currentPageTotal">下一頁</button>
    </div>
</body>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
    const magApp = Vue.createApp({
        data() {
            return {
                msgList: [
                    {
                        messageBoardId: "",
                        account: "",
                        memberName: "",
                        messageText: "",
                        messageTime: ""
                    }
                ],
                searchUserName: "",
                updateMsgIdTemp: "",
                updateMsgTemp: "",
                updateMsgTimeTemp: "",
                accountTemp: "@loginAccount",

                // 目前顯示頁碼
                currentShowPage: 1,
                // 目前頁面筆數
                currentPageSize: 5,
                // 目前頁面總數
                currentPageTotal: "",

                // 控制分頁清單或是搜尋分頁
                isSearchActive: false
            }
        },

        mounted() {
            let self = this;

            self.PaginationCount(self.currentShowPage);
        },

        computed: {
            // 計算顯示頁碼
            CalculatePage() {
                let self = this;
                let totalPage = [];
                let startPage = Math.max(self.currentShowPage - Math.floor(self.currentPageSize / 2), 1);
                let ednPage = Math.min(startPage + self.currentPageSize - 1, currentPageTotal);

                if ((endPage - startPage + 1) < self.currentPageTotal) {
                    startPage = Max.max(endPage - self.currentPageTotal + 1, 1);
                }

                for (let i = startPage; i < ednPage; i++) {
                    totalPage.push(i);
                }

                return totalPage;
            }
        },

        methods: {
            GetNameSearch(pageNum = 1) {
                let self = this;
                self.isSearchActive = true;

                if (pageNum < 1) return;
                self.currentShowPage = pageNum;

                let formData = new FormData();
                formData.append("userName", self.searchUserName);
                formData.append("currentShowPage", self.currentShowPage);

                fetch("/Lion/SearchMsgUserNameDataCountAll", {
                    method: "POST",
                    body: formData
                })
                    .then(r => { if (!r.ok) { throw new Error('Not OK'); } return r.json(); })
                    .then(d => {
                        self.currentPageTotal = Math.ceil(d.data.countData / self.currentPageSize);
                        self.msgList = d.data.itemData;
                    }).catch(error => console.error('Fetch error:', error));
            },

            GetNameClear() {
                let self = this;
                
                self.isSearchActive = false;
                self.searchUserName = "";
                self.PaginationCount(self.currentShowPage);
            },

            UpdateMsg(messageBoardId, messageText) {
                let self = this;

                self.updateMsgIdTemp = messageBoardId;
                self.updateMsgTemp = messageText;
            },

            SaveUpdateMsgApi(messageBoardId) {
                let self = this;

                fetch(`/Lion/EditMsgPost/${messageBoardId}`, {
                    method: "PUT",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ messageText: self.updateMsgTemp })
                })
                    .then(r => r.json())
                    .then(d => {
                        if (d == true) {
                            console.log("Success", d);
                            alert("修改成功");
                            self.updateMsgIdTemp = "";
                            self.updateMsgTemp = "";
                            self.updateMsgTimeTemp = "",
                            self.PaginationCount(self.currentShowPage);
                        }
                        else {
                            console.log("Fail", d);
                            alert("修改失敗");
                        }
                    });
            },

            RemoveMsgApi(messageBoardId) {
                let self = this;

                fetch(`/Lion/RemoveMsgPost/${messageBoardId}`, {
                    method: "DELETE",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(messageBoardId)
                })
                    .then(r => r.json())
                    .then(d => {
                        if (d == true) {
                            console.log("Success", d);
                            alert("刪除成功");
                            self.PaginationCount(self.currentShowPage);
                        }
                        else {
                            console.log("Fail", d);
                            alert("刪除失敗");
                        }
                    });
            },

            // 取得第幾頁 & 資料總筆數
            Pagination(pageNum) {
                let self = this;

                if (pageNum < 1) return;
                self.currentShowPage = pageNum;

                let formData = new FormData();
                formData.append("currentShowPage", self.currentShowPage);

                fetch("/Lion/GetDataCount")
                    .then(r => r.json())
                    .then(d => { 
                        self.currentPageTotal = Math.ceil(d / self.currentPageSize)
                    });

                fetch("/Lion/GetMsgPageAllPost", {
                    method: "POST",
                    body: formData
                })
                    .then(r => { if (!r.ok) { throw new Error('Not OK'); } return r.json(); })
                    .then(d => { self.msgList = d })
                    .catch(error => console.error('Fetch error:', error));
            },

            // 同時取得資料分頁與總筆數
            PaginationCount(pageNum) {
                let self = this;

                if (pageNum < 1) return;
                self.currentShowPage = pageNum;

                let formData = new FormData();
                formData.append("currentShowPage", self.currentShowPage);

                fetch("/Lion/GetDataCountAll", {
                    method: "POST",
                    body: formData
                }).then(r => { if (!r.ok) { throw new Error('Not OK'); } return r.json(); })
                  .then(d => {
                      self.currentPageTotal = Math.ceil(d.data.countData / self.currentPageSize);
                      self.msgList = d.data.itemData;
                    }).catch(error => console.error('Fetch error:', error));
            },

            // 取得時間
            GetDateTime(dateTime) {
                const date = new Date(dateTime);
                const year = date.getFullYear();
                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                const day = date.getDate().toString().padStart(2, '0');
                const hours = date.getHours();
                const minutes = date.getMinutes().toString().padStart(2, '0');
                const seconds = date.getSeconds().toString().padStart(2, '0');
                const hoursFormat = ((hours + 11) % 12 + 1).toString().padStart(2, '0');
                const condition = hours < 12 ? "上午" : "下午";

                return `${year}/${month}/${day} ${condition} ${hoursFormat}:${minutes}:${seconds}`;
            },
        },
    }).mount("#MsgList");
</script>